/* ESP8266 Webserver 'MIT License (MIT) Copyright (c) 2016 by David Bird'
 * Creato da Giuseppe Tamanini
 * 25/11/2018
 * Licenza CC BY-NC-SA 3.0 IT
*/
  
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <DNSServer.h>
#include <WiFiManager.h>     // https://github.com/tzapu/WiFiManager

WiFiClient client;
ESP8266WebServer server(80); // Start server on port 80 (default for a web-browser, change to your requirements, e.g. 8080 if your Router uses port 80
                             // To access server from the outsid of a WiFi network e.g. ESP8266WebServer server(8266); and then add a rule on your Router that forwards a
                             // connection request to http://your_network_ip_address:8266 to port 8266 and view your ESP server from anywhere.
                             // Example http://g6ejd.uk.to:8266 will be directed to http://192.168.0.40:8266 or whatever IP address your router gives to this server

String webpage, Argument_Name, Clients_Response1, Clients_Response2;
// variabili da impostare
int tempPav[4] = {35, 35, 35, 35}; // temperature ritorno impianto a pavimento
int BMTempPav[4] = {4, 4, 4, 4}; // tolleranze temperatura (da 2 a 10) impianto a pavimento
int T_VZ = 5; // tempo (da 1 a 30) secondi di apertura/chiusura valvola di zona dell'impianto a pavimento
int TT_VZ = 60; // tempo in secondi  (dato di targa) per la totale apertura/chiusura valvola di zona
int T_att_ip = 120; // tempo (da 30 a 3000) secondi di attesa prima della rilettura della temperatura di ritorno di una delle zone dell'impianto a pavimento
boolean erroreVZa[4] = {true, false, false, false}; // errore di apertura valvola di zona
boolean erroreVZc[4] = {false, true, false, false}; // errore di chiusura valcola di zona
int T_att_st = 120; // tempo in secondi (3 minuti) di attesa prima della lettura della temperatura di ritorno S03 del solare termico
int TempV3vie; // temperatura uscita valvola a 3 vie (verrà calcolata dal programma in base alla temperatura esterna)
int T_V3vie = 5; // tempo (da 1 a 30) secondi di apertura/chiusura valvola a 3 vie
int TT_V3vie = 105; // tempo in secondi (dato di targa) di totale apertura/ciusura valvola a 3 vie
int T_att_V3vie = 180; // tempo in secondi (3 minuti) di attesa prima della rilettura della temperatura di uscita dalla valvola a 3 vie
int BMTempV3vie = 4; // tolleranza  (da 2 a 10) temperatura uscita valvola 3 vie
int TempASMax = 55; // temperatura massima acqua sanitaria
int BMTempAS = 2; // tolleranza  (da 2 a 10) temperatura acqua sanitaria
int T_att_as = 180; // tempo in secondi (3 minuti) di attesa prima della lettura della temperatura di uscita S9 dello scambiatore acqua calda sanitaria
int T_att_rc = 120; // tempo in secondi (2 minuti) di attesa prima della rilettura della temperatura della caldaia
int T_att_ca = 180; // tempo in secondi (3 minuti) di attesa prima della lettura della temperatura di ritorno S12 dal puffer alla caldaia
int Tempriltemp = 5; // tempo in secondi di rilettura delle temperature rilevate dalle sonde

// variabili da visualizzare
int T[20] = {10, 65, 62, 55, 53, 50, 45, 50, 48, 80, 78, 70, 35, 36, 37, 38, 21, 21, 21, 21}; // Temperature pavimento
boolean zona[4] = {true, false, true, true};
int paVZ[4] = {25, 50, 0, 75};

boolean pompaST = true; // la pompa del solare termico è in funzione?
boolean erroreST = true; // errore pompa comandata da R4 solare termico

void setup() {
  Serial.begin(115200);
  //WiFiManager intialisation. Once completed there is no need to repeat the process on the current board
  WiFiManager wifiManager;
  // New OOB ESP8266 has no Wi-Fi credentials so will connect and not need the next command to be uncommented and compiled in, a used one with incorrect credentials will
  // so restart the ESP8266 and connect your PC to the wireless access point called 'ESP8266_AP' or whatever you call it below in ""
  // wifiManager.resetSettings(); // Command to be included if needed, then connect to http://192.168.4.1/ and follow instructions to make the WiFi connection
  // Set a timeout until configuration is turned off, useful to retry or go to sleep in n-seconds
  wifiManager.setTimeout(180);
  //fetches ssid and password and tries to connect, if connections succeeds it starts an access point with the name called "ESP8266_AP" and waits in a blocking loop for configuration
  if(!wifiManager.autoConnect("ESP8266_AP")) {
    Serial.println("failed to connect and timeout occurred");
    delay(3000);
    ESP.reset(); //reset and try again
    delay(5000);
  }
  // At this stage the WiFi manager will have successfully connected to a network, or if not will try again in 180-seconds
  //----------------------------------------------------------------------------------------------------------------------
  Serial.println("WiFi connected..");
  server.begin(); Serial.println("Webserver started..."); // Start the webserver
  Serial.print("Use this URL to connect: http://");// Print the IP address
  Serial.print(WiFi.localIP());Serial.println("/");
  // NOTE: You must use the IP address assigned to YOUR Board when printed/displayed here on your serial port
  // that's the address you must use, not the one I used !
  
  // Next define what the server should do when a client connects
  server.on("/", HandleClient); // The client connected with no arguments e.g. http:192.160.0.40/
  server.on("/result", ShowClientResponse);
}

void HandleClient() {
  if (server.args() > 0 ) { // Arguments were received
    for ( uint8_t i = 0; i < server.args(); i++ ) {
      Serial.print(server.argName(i)); // Display the argument
      Argument_Name = server.argName(i);
      if (server.argName(i) == "tempP2") {
        Serial.print(" Input received was: ");
        Serial.println(server.arg(i));
        tempPav[3] = server.arg(i).toInt();
        Clients_Response1 = server.arg(i);
      }
      if (server.argName(i) == "tempP1") {
        Serial.print(" Input received was: ");
        Serial.println(server.arg(i));
        tempPav[2] = server.arg(i).toInt();
        Clients_Response1 = server.arg(i);
      }
      if (server.argName(i) == "tempPT") {
        Serial.print(" Input received was: ");
        Serial.println(server.arg(i));
        tempPav[1] = server.arg(i).toInt();
        Clients_Response1 = server.arg(i);
      }
      if (server.argName(i) == "tempPint") {
        Serial.print(" Input received was: ");
        Serial.println(server.arg(i));
        tempPav[0] = server.arg(i).toInt();
        Clients_Response1 = server.arg(i);
      }
      if (server.argName(i) == "BMP2") {
        Serial.print(" Input received was: ");
        Serial.println(server.arg(i));
        BMTempPav[3] = server.arg(i).toInt();
        Clients_Response1 = server.arg(i);
      }
      if (server.argName(i) == "BMP2") {
        Serial.print(" Input received was: ");
        Serial.println(server.arg(i));
        BMTempPav[3] = server.arg(i).toInt();
        Clients_Response1 = server.arg(i);
      }
      if (server.argName(i) == "BMP1") {
        Serial.print(" Input received was: ");
        Serial.println(server.arg(i));
        BMTempPav[2] = server.arg(i).toInt();
        Clients_Response1 = server.arg(i);
      }
      if (server.argName(i) == "BMPT") {
        Serial.print(" Input received was: ");
        Serial.println(server.arg(i));
        BMTempPav[1] = server.arg(i).toInt();
        Clients_Response1 = server.arg(i);
      }
      if (server.argName(i) == "BMPint") {
        Serial.print(" Input received was: ");
        Serial.println(server.arg(i));
        BMTempPav[0] = server.arg(i).toInt();
        Clients_Response1 = server.arg(i);
      }
    }
  }
  creawebpage();
  server.send(200, "text/html", webpage); // Send a response to the client asking for input
}

void ShowClientResponse() {
  String webpage;
  webpage =  "<html>";
   webpage += "<head><title>Configurazione ESP8266</title>";
    webpage += "<style>";
     webpage += "body { background-color: #E6E6FA; font-family: Arial, Helvetica, Sans-Serif; Color: blue;}";
    webpage += "</style>";
   webpage += "</head>";
   webpage += "<body>";
    webpage += "<h1><br>ESP8266 Server - This was what the client sent</h1>";
    webpage += "<p>Name received was: " + Clients_Response1 + "</p>";
    webpage += "<p>Address received was: " + Clients_Response2 + "</p>";
   webpage += "</body>";
  webpage += "</html>";
  server.send(200, "text/html", webpage); // Send a response to the client asking for input
}

void loop() {
  server.handleClient();
}

void creawebpage() {
  webpage =  "<html>";
   webpage += "<head><title>Impianto Termico</title>";
    webpage += "<style>";
     webpage += "body { background-color: #E6E6FA; font-family: Arial, Helvetica, Sans-Serif; Color: blue;}";
    webpage += "</style>";
   webpage += "</head>";
   webpage += "<body>";
    webpage += "<h1>GESTIONE IMPIANTO TERMICO</h1>";  
    String IPaddress = WiFi.localIP().toString();
    webpage += "<form action='http://"+IPaddress+"' method='POST'>";
     webpage += "<font size='4'>Temperatura impianto pavimento P.2: <input type='number' value='" + String(tempPav[0]) + "' min='20' max='50' name='tempP2'>";
     webpage += " Banda morta: <input type='number' value='" + String(BMTempPav[0]) + "' min='2' max='10' name='BMP2'>";
     webpage += " Step di apertura/chiusura valvole di zona (secondi): <input type='number' value='" + String(T_VZ) + "' min='1' max='30' name='TVZ'><br>";
     webpage += "Temperatura impianto pavimento P.1: <input type='number' value='" + String(tempPav[1]) + "' min='20' max='50' name='tempP1'>";
     webpage += " Banda morta: <input type='number' value='" + String(BMTempPav[1]) + "' min='2' max='10' name='BMP1'>";
     webpage += " Tempo totale di apertura/chiusura valvole di zona (secondi): <input type='number' value='" + String(TT_VZ) + "' min='30' max='120' name='TTVZ'><br>";
     webpage += "Temperatura impianto pavimento P.T: <input type='number' value='" + String(tempPav[2]) + "' min='20' max='50' name='tempPT  '>";
     webpage += " Banda morta: <input type='number' value='" + String(BMTempPav[2]) + "' min='2' max='10' name='BMPT'>";
     webpage += " Tempo di attesa prima della lettura della temperatura di uscita zona (secondi): <input type='number' value='" + String(T_att_ip) + "' min='30' max='3000' name='TAIP'><br>";
     webpage += "Temperatura impianto pavimento P.int: <input type='number' value='" + String(tempPav[3]) + "' min='20' max='50' name='tempPint'>";
     webpage += " Banda morta: <input type='number' value='" + String(BMTempPav[3]) + "' min='2' max='10' name='BMPint'><br>";
     webpage += "Banda morta valvola 3 vie: <input type='number' value='" + String(BMTempV3vie) + "' min='2' max='10' name='BMV3vie'><br>";
     webpage += "Step di apertura/chiusura valvola 3 vie (secondi): <input type='number' value='" + String(T_V3vie) + "' min='1' max='30' name='TV3vie'>";
     webpage += " Tempo totale di apertura/chiusura valvola 3 vie (secondi): <input type='number' value='" + String(TT_V3vie) + "' min='30' max='120' name='TTV3vie'><br>";
     webpage += "Tempo di attesa prima della rilettura della temperatura di ritorno impianti a pavimento (secondi): <input type='number' value='" + String(T_att_V3vie) + "' min='30' max='3000' name='TAV3vie'><br>";
     webpage += "Tempo di attesa prima della rilettura della temperatura di ritorno solare termico (secondi): <input type='number' value='" + String(T_att_st) + "' min='30' max='3000' name='TAST'><br>";
     webpage += "Temperatura massima acqua calda sanitaria: <input type='number' value='" + String(TempASMax) + "' min='40' max='55' name='tempAS'>";
     webpage += " Banda morta: <input type='number' value='" + String(BMTempAS) + "' min='2' max='10' name='BMPAS'><br>";
     webpage += "Tempo di attesa prima della lettura della temperatura di uscita dello scambiatore acqua calda sanitaria (secondi): <input type='number' value='" + String(T_att_as) + "' min='30' max='3000' name='TAAS'><br>";
     webpage += "Tempo di attesa prima della rilettura della temperatura della caldaia (secondi): <input type='number' value='" + String(T_att_rc) + "' min='30' max='3000' name='TARC'><br>";
     webpage += "Tempo in secondi prima della lettura della temperatura di ritorno dal puffer alla caldaia (secondi): <input type='number' value='" + String(T_att_ca) + "' min='30' max='3000' name='TACA'><br>";
     webpage += "Tempo di rilettura delle temperature rilevate dalle sonde (secondi): <input type='number' value='" + String(Tempriltemp) + "' min='30' max='3000' name='TRST'><br>";
     webpage += "<input type='submit' value='Salva impostazioni'>";
     webpage += "<h1>DATI IMPIANTO TERMICO</h1>";  
     webpage += "IMPIANTO A PAVIMENTO:<br>";  
     String szona1, szona2, szona3, szona4;
     if (zona[0]) szona1 = "on "; else szona1 = "off";
     if (zona[1]) szona2 = "on "; else szona2 = "off";
     if (zona[2]) szona3 = "on "; else szona3 = "off";
     if (zona[3]) szona4 = "on "; else szona4 = "off";
     String seazona1, seazona2, seazona3, seazona4;
     if (erroreVZa[0]) seazona1 = "Errore apertura valvola "; else seazona1 = "";
     if (erroreVZa[1]) seazona2 = "Errore apertura valvola "; else seazona2 = "";
     if (erroreVZa[2]) seazona3 = "Errore apertura valvola "; else seazona3 = "";
     if (erroreVZa[3]) seazona4 = "Errore apertura valvola "; else seazona4 = "";
     String seczona1, seczona2, seczona3, seczona4;
     if (erroreVZc[0]) seczona1 = "Errore chiusura valvola "; else seczona1 = "";
     if (erroreVZc[1]) seczona2 = "Errore chiusura valvola "; else seczona2 = "";
     if (erroreVZc[2]) seczona3 = "Errore chiusura valvola "; else seczona3 = "";
     if (erroreVZc[3]) seczona4 = "Errore chiusura valvola "; else seczona4 = "";
     webpage += "Zona 4 (P.2): " + String(T[16 - 1]) + "&deg;C " + szona4 + " " + paVZ[3] + "&#37; " + seazona4 + seczona4 + "- Zona 3 (P.1): " + String(T[15 - 1]) + "&deg;C " + szona3 + " " + paVZ[2] + "&#37; " + seazona3 + seczona3 + "- Zona 2 (P.T): " + String(T[14 - 1]) + "&deg;C " + szona2 + " " + paVZ[1] + "&#37; " + seazona2 + seczona2 + "- Zona 1 (P.int)1: " + String(T[13 - 1]) + "&deg;C " + szona1 + " " + paVZ[0] + "&#37; " + seazona1 + seczona1 + "<br>";
     webpage += "SOLARE TERMICO:<br>";  
     String spompaST, seST;
     if (pompaST) spompaST = "on "; else spompaST = "off";
     if (erroreST) seST = "Errore malfunzionamento pompa solare termico"; else seST = "";
     webpage += "Pompa R4: " + spompaST + " - Temperatura puffer basso: " + String(T[5 - 1]) + "&deg;C - Temperatura pannelli: " + String(T[2 - 1]) + "&deg;C - Temperatura entrata puffer: " + String(T[3 - 1]) + "&deg;<font color='red'>" + seST +"</font><br>";
     //webpage += "<meta http-equiv='refresh' content='1'>";
    webpage += "</form>";
   webpage += "</body>";
  webpage += "</html>";
}
